	Classes

Classes provide a means of bundling data and functionality together. Creating new class creates a new type of object, allowing new instances of that type to be made. Each classs intance can have attributes attached to it for maintaining its state.
Class intances can also have methods for modifying its state.

	Class objects

Class object supports two kinds of operations: attribute references and instantiaion.

Attribute references use the standard syntax used for all attribute referencesin python: obj.name .
Valid attribute names are all the names that were in the class's namespace when the class object was created.

	class MyClass:
		i = 12345
		
		def f(self):
			return 'hello world'

then MyClass.i and MyClass.f are valid attribute references, returning an integer and a function object, respectively.
Class attributes can also be assigned  to, so we can change the value of MyClass.i by assignment.




Class instantiation uses function notation. Just pretend that the class object is a parameterless function that  returns a new instance of the class.
	x = MyClass()
creates a new instance of the class and assigns this object to the local variable x.

The instantiaiion operation creates an empty object. Many classes like to create objects with instances customized to a specific initial state. Therefore a class may define a special method named __init__(), like this:

	def __init__(self):
		self.data = []

When a class defines an __init__() method, class instantiation automatically invokes __init__() for the newly-created class instance.
